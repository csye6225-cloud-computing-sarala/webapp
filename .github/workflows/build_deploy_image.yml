name: Build Packer Custom Image

on:
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build and Test Web Application & Create Custom AMI
    # if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    env:
      PROD_DB_HOST: ${{ secrets.PROD_DB_HOST }}
      PROD_DB_USER: ${{ secrets.PROD_DB_USER }}
      PROD_DB_PASSWORD: ${{ secrets.PROD_DB_PASSWORD }}
      PROD_DB_NAME: ${{ secrets.PROD_DB_NAME }}
      PROD_DB_PORT: ${{ secrets.PROD_DB_PORT }}

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Node.js environment
      - name: Set up Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: "16"

      # Step 3: Install PostgreSQL
      - name: Install PostgreSQL
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql postgresql-contrib
          sudo systemctl start postgresql

      # Step 4: Set up PostgreSQL user and database with logs
      - name: Set up PostgreSQL user and database
        run: |
          sudo service postgresql start
          if [[ -z "${{ secrets.PROD_DB_USER }}" || -z "${{ secrets.PROD_DB_PASSWORD }}" ]]; then
          echo "DB_USER or DB_PASSWORD secret is not set."
          exit 1
          fi
          if sudo -u postgres psql -tc "SELECT 1 FROM pg_roles WHERE rolname='${{ secrets.PROD_DB_USER }}';" | grep -q 1; then
          echo "User exists, altering password..."
          sudo -u postgres psql -c "ALTER USER ${{ secrets.PROD_DB_USER }} WITH PASSWORD '${{ secrets.PROD_DB_PASSWORD }}';"
          else
          echo "User does not exist, creating user..."
          sudo -u postgres psql -c "CREATE USER ${{ secrets.PROD_DB_USER }} WITH PASSWORD '${{ secrets.PROD_DB_PASSWORD }}';"
          fi
          sudo -u postgres psql -tc "SELECT 1 FROM pg_database WHERE datname='${{ secrets.PROD_DB_NAME }}';" | grep -q 1 || sudo -u postgres psql -c "CREATE DATABASE ${{ secrets.PROD_DB_NAME }} OWNER ${{ secrets.PROD_DB_USER }};"

      # Step 5: Run integration tests
      - name: Install dependencies and run tests
        run: |
          npm install
          npm run
        env:
          PROD_DB_HOST: ${{ secrets.PROD_DB_HOST }}
          PROD_DB_USER: ${{ secrets.PROD_DB_USER }}
          PROD_DB_PASSWORD: ${{ secrets.PROD_DB_PASSWORD }}
          PROD_DB_NAME: ${{ secrets.PROD_DB_NAME }}
          PROD_DB_PORT: ${{ secrets.PROD_DB_PORT }}

      # Step 6: Zip the entire repository
      - name: Zip application code
        run: |
          zip -r webapp.zip .

      # Step 6: Set up the environment file
      - name: Setup Environment File
        run: |
          mkdir -p ./environment
          cat << EOF > ./environment/development.env
          PROD_DB_USER=${{ secrets.PROD_DB_USER }}
          PROD_DB_HOST=${{ secrets.PROD_DB_HOST }}
          PROD_DB_NAME=${{ secrets.PROD_DB_NAME }}
          PROD_DB_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}
          PROD_DB_PORT=${{ secrets.PROD_DB_PORT }}
          DB_DIALECT=${{ secrets.DB_DIALECT }}
          PORT=${{ secrets.PORT }}
          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION=${{ secrets.AWS_REGION }}
          S3_BUCKET=${{ secrets.S3_BUCKET }}
          EOF
        shell: bash

      - name: Check if environment file exists
        run: ls -l ./environment/development.env

      - name: Show environment file content
        run: cat ./environment/development.env

      # Step 7: Upload artifact (optional)
      - name: Upload webapp artifact
        uses: actions/upload-artifact@v3
        with:
          name: webapp.zip
          path: webapp.zip

      # Step 8: Install Packer
      - name: Install Packer
        run: |
          sudo apt-get update && sudo apt-get install -y wget unzip
          wget https://releases.hashicorp.com/packer/1.8.4/packer_1.8.4_linux_amd64.zip
          unzip -o packer_1.8.4_linux_amd64.zip -d /usr/local/bin/

      # Step 9: AWS configure
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 10: Initialize Packer
      - name: Initialize Packer (Install Plugins)
        run: |
          packer init packer/ubuntu-24.04.pkr.hcl

      # Step 10: Run Packer Build
      - name: Run Packer Build
        run: |
          packer build \
          -var "prod_db_user=${{ secrets.PROD_DB_USER }}" \
          -var "prod_db_password=${{ secrets.PROD_DB_PASSWORD }}" \
          -var "prod_db_name=${{ secrets.PROD_DB_NAME }}" \
          -var "prod_db_port=${{ secrets.PROD_DB_PORT }}" \
          -var "aws_profile=${{ secrets.AWS_PROFILE }}" \
          -var "aws_region=${{ secrets.AWS_REGION }}" \
          -var "aws_instance_type=${{ secrets.AWS_INSTANCE_TYPE }}" \
          -var "aws_source_ami=${{ secrets.AWS_SOURCE_AMI }}" \
          -var "aws_vpc_id=${{ secrets.AWS_VPC_ID }}" \
          -var "aws_subnet_id=${{ secrets.AWS_SUBNET_ID }}" \
          -var "volume_size=${{ secrets.VOLUME_SIZE }}" \
          -var "aws_demo_user=${{ secrets.DEMO_USER }}" \
          -var "aws_dev_user=${{ secrets.DEV_USER }}" \
          packer/ubuntu-24.04.pkr.hcl -machine-readable > output.log
          AMI_ID=$(grep -m 1 -oP 'ami-\w+' output.log)
          echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV

      # Step 5: Extract the AMI ID
      - name: Use Extracted AMI ID
        id: extract-ami
        run: |
          echo "Extracted AMI ID: $AMI_ID"

      # # Step 6: Update Launch Template
      # - name: Get Latest Launch Template Version
      #   id: get-latest-version
      #   run: |
      #     LATEST_VERSION=$(aws ec2 describe-launch-template-versions \
      #       --launch-template-id ${{ secrets.LAUNCH_TEMPLATE_ID }} \
      #       --query 'LaunchTemplateVersions[-1].VersionNumber' --output text)
      #     echo "LATEST_VERSION=$LATEST_VERSION" >> $GITHUB_ENV

      # - name: Update AWS Launch Template
      #   run: |
      #     aws ec2 create-launch-template-version \
      #       --launch-template-id ${{ secrets.LAUNCH_TEMPLATE_ID }} \
      #       --source-version ${{ env.LATEST_VERSION }} \
      #       --launch-template-data "{
      #         \"ImageId\": \"${{ env.AMI_ID }}\",
      #         \"InstanceType\": \"${{ secrets.AWS_INSTANCE_TYPE }}\"
      #       }"
      #     aws ec2 modify-launch-template \
      #       --launch-template-id ${{ secrets.LAUNCH_TEMPLATE_ID }} \
      #       --default-version $(aws ec2 describe-launch-template-versions \
      #         --launch-template-id ${{ secrets.LAUNCH_TEMPLATE_ID }} \
      #         --query 'LaunchTemplateVersions[-1].VersionNumber' --output text)

      # # Step 7: Update Auto Scaling Group
      # - name: Update Auto Scaling Group
      #   run: |
      #     aws autoscaling update-auto-scaling-group \
      #       --auto-scaling-group-name ${{ secrets.ASG_NAME }} \
      #       --launch-template "LaunchTemplateId=${{ secrets.LAUNCH_TEMPLATE_ID }},Version=${{ env.LATEST_VERSION }}" \
      #       --region ${{ secrets.AWS_REGION }}

      # # Step 8: Rolling Updates
      # - name: Check for Existing Instance Refresh
      #   run: |
      #     REFRESH_STATUS=$(aws autoscaling describe-instance-refreshes \
      #       --auto-scaling-group-name ${{ secrets.ASG_NAME }} \
      #       --query "InstanceRefreshes[0].Status" --output text)
      #     if [[ "$REFRESH_STATUS" == "InProgress" ]]; then
      #       echo "An Instance Refresh is already in progress. Waiting for it to complete..."
      #       REFRESH_ID=$(aws autoscaling describe-instance-refreshes \
      #         --auto-scaling-group-name ${{ secrets.ASG_NAME }} \
      #         --query "InstanceRefreshes[0].InstanceRefreshId" --output text)
      #       while true; do
      #         STATUS=$(aws autoscaling describe-instance-refreshes \
      #           --auto-scaling-group-name ${{ secrets.ASG_NAME }} \
      #           --query "InstanceRefreshes[?InstanceRefreshId=='$REFRESH_ID'].Status" --output text)
      #         echo "Current status: $STATUS"
      #         if [[ "$STATUS" == "Successful" ]]; then
      #           echo "Instance refresh completed successfully."
      #           break
      #         elif [[ "$STATUS" == "Failed" ]]; then
      #           echo "Instance refresh failed."
      #           exit 1
      #         fi
      #         sleep 30
      #       done
      #     else
      #       echo "No instance refresh in progress. Proceeding with a new instance refresh."
      #     fi

      # - name: Perform Rolling Updates
      #   run: |
      #     aws autoscaling start-instance-refresh \
      #       --auto-scaling-group-name ${{ secrets.ASG_NAME }} \
      #       --preferences '{"MinHealthyPercentage": 50}'

      # # Step 9: Wait for Instance Refresh to Complete
      # - name: Wait for Instance Refresh to Complete
      #   run: |
      #     REFRESH_ID=$(aws autoscaling describe-instance-refreshes \
      #       --auto-scaling-group-name ${{ secrets.ASG_NAME }} \
      #       --query "InstanceRefreshes[0].InstanceRefreshId" --output text)
      #     echo "Waiting for instance refresh $REFRESH_ID to complete..."
      #     while true; do
      #       STATUS=$(aws autoscaling describe-instance-refreshes \
      #         --auto-scaling-group-name ${{ secrets.ASG_NAME }} \
      #         --query "InstanceRefreshes[?InstanceRefreshId=='$REFRESH_ID'].Status" --output text)
      #       echo "Current status: $STATUS"
      #       if [[ "$STATUS" == "Successful" ]]; then
      #         echo "Instance refresh completed successfully."
      #         break
      #       elif [[ "$STATUS" == "Failed" ]]; then
      #         echo "Instance refresh failed."
      #         exit 1
      #       fi
      #       sleep 30
      #     done
