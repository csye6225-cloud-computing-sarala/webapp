name: Build Packer Custom Image

on:
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build and Test Web Application & Create Custom AMI
    # if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    env:
      PROD_DB_HOST: ${{ secrets.PROD_DB_HOST }}
      PROD_DB_USER: ${{ secrets.PROD_DB_USER }}
      PROD_DB_PASSWORD: ${{ secrets.PROD_DB_PASSWORD }}
      PROD_DB_NAME: ${{ secrets.PROD_DB_NAME }}
      PROD_DB_PORT: ${{ secrets.PROD_DB_PORT }}

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Node.js environment
      - name: Set up Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: "22.2.0"

      - name: Install dependencies
        run: npm install

      # Step 3: Install PostgreSQL
      - name: Install PostgreSQL
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql postgresql-contrib
          sudo systemctl start postgresql

      # Step 4: Set up PostgreSQL user and database with logs
      - name: Set up PostgreSQL user and database
        run: |
          sudo service postgresql start
          if [[ -z "${{ secrets.TEST_DB_USER }}" || -z "${{ secrets.TEST_DB_PASSWORD }}" ]]; then
          echo "DB_USER or DB_PASSWORD secret is not set."
          exit 1
          fi
          if sudo -u postgres psql -tc "SELECT 1 FROM pg_roles WHERE rolname='${{ secrets.TEST_DB_USER }}';" | grep -q 1; then
          echo "User exists, altering password..."
          sudo -u postgres psql -c "ALTER USER ${{ secrets.TEST_DB_USER }} WITH PASSWORD '${{ secrets.TEST_DB_PASSWORD }}';"
          else
          echo "User does not exist, creating user..."
          sudo -u postgres psql -c "CREATE USER ${{ secrets.TEST_DB_USER }} WITH PASSWORD '${{ secrets.TEST_DB_PASSWORD }}';"
          fi
          sudo -u postgres psql -tc "SELECT 1 FROM pg_database WHERE datname='${{ secrets.TEST_DB_NAME }}';" | grep -q 1 || sudo -u postgres psql -c "CREATE DATABASE ${{ secrets.TEST_DB_NAME }} OWNER ${{ secrets.TEST_DB_USER }};"

      # Step 5: Run integration tests
      - name: Install dependencies and run tests
        env:
          TEST_DB_HOST: ${{ secrets.TEST_DB_HOST }}
          TEST_DB_USER: ${{ secrets.TEST_DB_USER }}
          TEST_DB_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}
          TEST_DB_NAME: ${{ secrets.TEST_DB_NAME }}
          TEST_DB_PORT: ${{ secrets.TEST_DB_PORT }}
        run: npm test

      # Step 6: Zip the entire repository
      - name: Zip application code
        run: |
          zip -r webapp.zip .

      #   # Step 9: AWS configure
      #   env:
      #     ENVIRONMENT: ${{ secrets.ENVIRONMENT }}
      # - name: Configure AWS Credentials
      #   if: env.ENVIRONMENT == 'dev'
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: ${{ secrets.AWS_REGION }}
      # - name: Configure AWS Credentials for demo environment
      #   if: env.ENVIRONMENT == 'demo'
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     aws-access-key-id: ${{ secrets.DEMO_ACCESS }}
      #     aws-secret-access-key: ${{ secrets.DEMO_SECRET }}
      #     aws-region: ${{ secrets.AWS_REGION }}

      # Step 6: Set up the environment file
      - name: Setup Environment File
        run: |
          mkdir -p ./environment
          cat << EOF > ./environment/development.env
          PROD_DB_USER=${{ secrets.PROD_DB_USER }}
          PROD_DB_HOST=${{ secrets.PROD_DB_HOST }}
          PROD_DB_NAME=${{ secrets.PROD_DB_NAME }}
          PROD_DB_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}
          PROD_DB_PORT=${{ secrets.PROD_DB_PORT }}
          DB_DIALECT=${{ secrets.DB_DIALECT }}
          PORT=${{ secrets.PORT }}
          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION=${{ secrets.AWS_REGION }}
          S3_BUCKET=${{ secrets.S3_BUCKET }}
          DOMAIN=${{ secrets.DOMAIN }}
          EOF
        shell: bash

      - name: Check if environment file exists
        run: ls -l ./environment/development.env

      - name: Show environment file content
        run: cat ./environment/development.env

      # Step 7: Upload artifact (optional)
      - name: Upload webapp artifact
        uses: actions/upload-artifact@v3
        with:
          name: webapp.zip
          path: webapp.zip

      # Step 8: Install Packer
      - name: Install Packer
        run: |
          sudo apt-get update && sudo apt-get install -y wget unzip
          wget https://releases.hashicorp.com/packer/1.8.4/packer_1.8.4_linux_amd64.zip
          unzip -o packer_1.8.4_linux_amd64.zip -d /usr/local/bin/

        # Step 9: AWS configure
      - name: Configure AWS credentials
        env:
          AWS_PROFILE: ${{ secrets.AWS_PROFILE }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        if: env.AWS_PROFILE == 'dev'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Configure AWS dev profile credentials
        env:
          AWS_PROFILE: ${{ secrets.AWS_PROFILE }}
        if: env.AWS_PROFILE == 'demo'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_DEMO_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_DEMO_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 10: Initialize Packer
      - name: Initialize Packer (Install Plugins)
        run: |
          packer init packer/ubuntu-24.04.pkr.hcl

      # Step 10: Run Packer Build
      - name: Run Packer Build
        run: |
          packer build \
          -var "prod_db_user=${{ secrets.PROD_DB_USER }}" \
          -var "prod_db_password=${{ secrets.PROD_DB_PASSWORD }}" \
          -var "prod_db_name=${{ secrets.PROD_DB_NAME }}" \
          -var "prod_db_port=${{ secrets.PROD_DB_PORT }}" \
          -var "aws_profile=${{ secrets.AWS_PROFILE }} \
          -var "aws_region=$AWS_REGION \
          -var "aws_instance_type=${{ secrets.AWS_INSTANCE_TYPE }}" \
          -var "aws_source_ami=${{ secrets.AWS_SOURCE_AMI }}" \
          -var "aws_vpc_id=${{ secrets.AWS_VPC_ID }}" \
          -var "aws_subnet_id=${{ secrets.AWS_SUBNET_ID }}" \
          -var "volume_size=${{ secrets.VOLUME_SIZE }}" \
          -var "aws_demo_user=${{ secrets.DEMO_USER }}" \
          -var "aws_dev_user=${{ secrets.DEV_USER }}" \
          packer/ubuntu-24.04.pkr.hcl

      # - name: Update Launch Template
      #   run: |
      #     asg_name="app-asg"

      #     # Get the Auto Scaling Group name
      #     asg_nametest=$(aws autoscaling describe-auto-scaling-groups \
      #       --query "AutoScalingGroups | sort_by(@, &AutoScalingGroupARN)[-1].AutoScalingGroupName" \
      #       --output text)

      #     echo "Latest Auto Scaling Group Name: $asg_nametest"
      #     echo "Latest Auto Scaling Group Name: $asg_name"

      #     # Get the Launch Template ID associated with the Auto Scaling Group
      #     launch_template_id=$(aws autoscaling describe-auto-scaling-groups \
      #       --auto-scaling-group-names $asg_name \
      #       --query "AutoScalingGroups[0].LaunchTemplate.LaunchTemplateId" \
      #       --output text)
      #     echo "Launch Template ID: $launch_template_id"

      #     # Get the latest AMI ID
      #     latest_ami=$(aws ec2 describe-images \
      #       --executable-users self \
      #       --filters "Name=state,Values=available" "Name=architecture,Values=x86_64" "Name=root-device-type,Values=ebs" \
      #       --query "reverse(sort_by(Images, &CreationDate))[0].ImageId" --output text)
      #     echo "Latest AMI ID: $latest_ami"

      #     # Get the latest launch template version
      #     latest_version=$(aws ec2 describe-launch-template-versions \
      #       --launch-template-id $launch_template_id \
      #       --query 'LaunchTemplateVersions[-1].VersionNumber' --output text)
      #     echo "Latest Launch Template Version: $latest_version"

      #     # Create a new version of the launch template
      #     aws ec2 create-launch-template-version \
      #       --launch-template-id $launch_template_id \
      #       --source-version $latest_version \
      #       --launch-template-data "{
      #         \"ImageId\": \"$latest_ami\",
      #         \"InstanceType\": \"t2.micro\"
      #       }"

      #     # Get the newly created version
      #     new_version=$((latest_version+1))
      #     echo "New Launch Template Version: $new_version"

      #     # Set the newly created version as the default
      #     aws ec2 modify-launch-template \
      #       --launch-template-id $launch_template_id \
      #       --default-version $new_version

      #     echo "Updated launch template to default version $new_version"

      #     # Update the auto-scaling group to use the new launch template version
      #     aws autoscaling update-auto-scaling-group \
      #       --auto-scaling-group-name $asg_name \
      #       --launch-template "LaunchTemplateId=$launch_template_id,Version=$new_version"
      #     echo "Auto-scaling group updated with new launch template version"

      # - name: Refresh Auto Scaling Group
      #   run: |
      #     asg_name="app-asg"
      #     # Start instance refresh for the Auto Scaling Group
      #     refresh_id=$(aws autoscaling start-instance-refresh \
      #       --auto-scaling-group-name $asg_name \
      #       --preferences '{"InstanceWarmup": 300, "MinHealthyPercentage": 50}' \
      #       --query 'InstanceRefreshId' --output text)
      #     echo "Instance Refresh ID: $refresh_id"

      #     # Monitor the instance refresh status
      #     while true; do
      #       refresh_status=$(aws autoscaling describe-instance-refreshes \
      #         --auto-scaling-group-name $asg_name \
      #         --query "InstanceRefreshes[?InstanceRefreshId=='$refresh_id'].Status" \
      #         --output text)
      #       echo "Instance Refresh Status: $refresh_status"

      #     if [ "$refresh_status" == "Successful" ]; then
      #       echo "Instance refresh completed successfully."
      #       break
      #     elif [ "$refresh_status" == "Failed" ]; then
      #       echo "Instance refresh failed."
      #       exit 1
      #     elif [ "$refresh_status" == "Cancelled" ]; then
      #       echo "Instance refresh was cancelled."
      #       exit 1
      #     else
      #       echo "Instance refresh in progress. Waiting..."
      #       sleep 30
      #     fi
      #      done
